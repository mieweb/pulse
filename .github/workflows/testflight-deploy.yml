name: Deploy to TestFlight
permissions:
  contents: read

"on":
  # Manual workflow dispatch - can be triggered from GitHub Actions UI
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_build:
        description: 'Skip the build step (use existing build)'
        required: false
        default: false
        type: boolean

  # Tag-based deployment for version releases
  push:
    tags:
      - 'v*.*.*'  # Matches v1.0.0, v2.1.3, etc.

  # Release-based deployment (optional)
  release:
    types: [published]

env:
  # Apple credentials for TestFlight upload
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  ASC_APP_ID: ${{ secrets.ASC_APP_ID }}
  # App Store Connect API Key for authentication
  API_KEY_ID: ${{ secrets.API_KEY_ID }}
  API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}
  API_KEY_PATH: ${{ secrets.API_KEY_PATH }}
  
  # iOS build configuration
  IOS_SCHEME: 'pulse'
  IOS_WORKSPACE: 'ios/pulse.xcworkspace'
  IOS_CONFIGURATION: 'Release'
  IOS_DESTINATION: 'generic/platform=iOS'

jobs:
  deploy-ios:
    name: Deploy iOS App to TestFlight
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install Expo CLI
        run: npm install -g @expo/cli

      - name: Set version from app.json
        run: |
          VERSION=$(node -p "require('./app.json').expo.version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Prebuild iOS project
        run: npx expo prebuild

      - name: Install iOS dependencies
        run: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Authenticate with Apple
        if: ${{ !inputs.skip_build || inputs.skip_build == false }}
        run: |
          # Create API key file from secret
          echo "${API_KEY_PATH}" | base64 -d > AuthKey_${API_KEY_ID}.p8
          
          # Authenticate with Apple using altool
          xcrun altool --store-password-in-keychain-item "ALTOOL_AUTH" \
            -u "${APPLE_ID}" \
            -p "${APPLE_ID_PASSWORD}"

      - name: Build iOS Archive
        if: ${{ !inputs.skip_build || inputs.skip_build == false }}
        run: |
          mkdir -p ./build

          xcodebuild archive \
            -workspace "$IOS_WORKSPACE" \
            -scheme "$IOS_SCHEME" \
            -configuration "$IOS_CONFIGURATION" \
            -destination "$IOS_DESTINATION" \
            -archivePath ./build/pulse.xcarchive \
            -allowProvisioningUpdates \
            -authenticationKeyPath "./AuthKey_${API_KEY_ID}.p8" \
            -authenticationKeyID "${API_KEY_ID}" \
            -authenticationKeyIssuerID "${API_KEY_ISSUER_ID}" \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID"

      - name: Export IPA
        if: ${{ !inputs.skip_build || inputs.skip_build == false }}
        run: |
          cat > exportOptions.plist << 'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>teamID</key>
            <string>${APPLE_TEAM_ID}</string>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
            -archivePath ./build/pulse.xcarchive \
            -exportPath ./build \
            -exportOptionsPlist exportOptions.plist \
            -allowProvisioningUpdates

      - name: Upload to TestFlight
        if: ${{ !inputs.skip_build || inputs.skip_build == false }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file ./build/pulse.ipa \
            --username "${APPLE_ID}" \
            --password "${APPLE_ID_PASSWORD}"

      - name: Skip build notification
        if: ${{ inputs.skip_build == true }}
        run: echo "Build step was skipped as requested."

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: TestFlight" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
