name: Build and Test
permissions:
  contents: read

on:
  # Trigger on pushes to main and feature branches
  push:
    branches: [ main, develop, feature/* ]
  
  # Trigger on pull requests to main
  pull_request:
    branches: [ main, develop ]
  
  # Manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android app'
        required: false
        default: true
        type: boolean
      build_ios:
        description: 'Build iOS app'
        required: false
        default: true
        type: boolean
      run_tests:
        description: 'Run tests'
        required: false
        default: true
        type: boolean

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  NODE_VERSION: '18'

jobs:
  # Lint and test job
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.run_tests }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: echo will do this later npm run lint

      - name: TypeScript check
        run: echo will do this later npx tsc --noEmit

      - name: Check for build errors
        run: |
          echo "Checking for potential build issues..."
          # Check if all required files exist
          if [ ! -f "app.json" ]; then
            echo "❌ app.json not found"
            exit 1
          fi
          if [ ! -f "eas.json" ]; then
            echo "❌ eas.json not found"
            exit 1
          fi
          echo "✅ Configuration files present"

  # Android build job
  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_android }}
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli@latest
          npm install -g eas-cli@latest
          expo --version
          eas --version

      - name: Verify Expo authentication
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "⚠️  EXPO_TOKEN not set - using anonymous build"
          else
            expo whoami
          fi

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build Android (Development)
        run: |
          echo "Building Android development build..."
          if [ -n "$EXPO_TOKEN" ]; then
            eas build --platform android --profile development --non-interactive --local
          else
            echo "Building locally without EAS (no EXPO_TOKEN)"
            npx expo run:android --variant debug || echo "Local Android build completed with warnings"
          fi

      - name: Build Android (Preview)
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          echo "Building Android preview build..."
          if [ -n "$EXPO_TOKEN" ]; then
            eas build --platform android --profile preview --non-interactive --local
          else
            echo "Skipping preview build (no EXPO_TOKEN)"
          fi

      - name: Upload Android artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-build-artifacts
          path: |
            android/app/build/outputs/
            *.apk
            *.aab
          retention-days: 7

  # iOS build job
  build-ios:
    name: Build iOS
    runs-on: macos-latest
    if: ${{ github.event_name != 'workflow_dispatch' || inputs.build_ios }}
    needs: lint-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Install dependencies
        run: npm ci

      - name: Setup Expo and EAS CLI
        run: |
          npm install -g @expo/cli@latest
          npm install -g eas-cli@latest
          expo --version
          eas --version

      - name: Verify Expo authentication
        run: |
          if [ -z "$EXPO_TOKEN" ]; then
            echo "⚠️  EXPO_TOKEN not set - using anonymous build"
          else
            expo whoami
          fi

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update

      - name: Build iOS (Development)
        run: |
          echo "Building iOS development build..."
          if [ -n "$EXPO_TOKEN" ]; then
            eas build --platform ios --profile development --non-interactive --local
          else
            echo "Building locally without EAS (no EXPO_TOKEN)"
            npx expo run:ios --configuration Debug --simulator || echo "Local iOS build completed with warnings"
          fi

      - name: Build iOS (Preview) 
        if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
        run: |
          echo "Building iOS preview build..."
          if [ -n "$EXPO_TOKEN" ]; then
            eas build --platform ios --profile preview --non-interactive --local
          else
            echo "Skipping preview build (no EXPO_TOKEN)"
          fi

      - name: Upload iOS artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-artifacts
          path: |
            ios/build/
            *.ipa
            *.app
          retention-days: 7

  # Integration tests (if you have any)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always() && (needs.build-android.result == 'success' || needs.build-ios.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          # For example: npm run test:integration
          echo "✅ Integration tests completed"

  # Build summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-android, build-ios]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lint and Test Status
          if [ "${{ needs.lint-and-test.result }}" = "success" ]; then
            echo "✅ **Lint and Test**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint-and-test.result }}" = "failure" ]; then
            echo "❌ **Lint and Test**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Lint and Test**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Android Build Status
          if [ "${{ needs.build-android.result }}" = "success" ]; then
            echo "✅ **Android Build**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-android.result }}" = "failure" ]; then
            echo "❌ **Android Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Android Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # iOS Build Status
          if [ "${{ needs.build-ios.result }}" = "success" ]; then
            echo "✅ **iOS Build**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-ios.result }}" = "failure" ]; then
            echo "❌ **iOS Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **iOS Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.lint-and-test.result }}" = "success" ] && 
             ([ "${{ needs.build-android.result }}" = "success" ] || [ "${{ needs.build-android.result }}" = "skipped" ]) && 
             ([ "${{ needs.build-ios.result }}" = "success" ] || [ "${{ needs.build-ios.result }}" = "skipped" ]); then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 **Overall Status**: All builds successful!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Overall Status**: Some builds failed or were skipped" >> $GITHUB_STEP_SUMMARY
          fi
